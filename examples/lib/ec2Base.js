/**
 * @fileOverview Supporting code for the examples.
 *
 * This deploys an EC2 stack from one of the example AWS templates.
 *
 * First create an EC2 key pair called 'cloudformation-deploy-example.'
 *
 * Depending on the instanceType specified it can be made to succeed or fail
 * due to the availability of virtualization support. This is helpful when
 * wanting to demonstrate behavior of the deployment code on success or failure.
 *
 * Fail on: t2.micro.
 * Succeed on: m1.small.
 */

// Core.
var fs = require('fs');
var path = require('path');
var util = require('util');

// Local.
var cloudFormationDeploy = require('../../index');

/**
 * Run the deployment.
 *
 * @param {String} instanceType A valid EC2 instance type.
 * @param {Function} callback Of the form function (error, result).
 */
exports.run = function (instanceType, callback) {

  var unixTimestamp = Math.round((new Date()).getTime() / 1000);

  var config = {
    // If defined, this property is passed to the AWS SDK client. It is not
    // recommended to use this approach, but instead configure the client via
    // the environment.
    // clientOptions : {
    //   accessKeyId: 'akid',
    //   secretAccessKey: 'secret',
    //   region: 'us-east-1'
    // },
    baseName: 'ec2-cloudformation-deploy',
    version: '0.1.0',
    // This should usually be a build ID generated by a task manager, or other
    // unique number for this particular stack. Using a Unix timestamp is a fair
    // fallback for the sake of making this example run.
    deployId: unixTimestamp,
    progressCheckIntervalInSeconds: 3,
    // Parameters provided to the CloudFormation template.
    parameters: {
      // You must create an EC2 Key Pair with this name.
      KeyName: 'cloudformation-deploy-example',
      InstanceType: instanceType,
      SSHLocation: '0.0.0.0/0'
    },
    // Invoked once for each new event during stack creation and deletion.
    onEventFn: function (event) {
      console.log(util.format(
        'Event: %s',
        JSON.stringify(event)
      ));
    },
    // Invoked after stack creation is successful, but before any prior stacks
    // are deleted. Usually used to switch over resources to point to the new
    // stack, but here just an excuse for more example logging.
    postCreationFn: function (stackDescription, innerCallback) {
      console.log(util.format(
        'Deployed stack description: %s',
        JSON.stringify(stackDescription, null, '  ')
      ));

      innerCallback();
    }
  };

  var templatePath = path.join(__dirname, '../templates/ec2.json');
  var template = fs.readFileSync(templatePath, {
    encoding: 'utf8'
  });

  cloudFormationDeploy.deploy(config, template, callback);
};
